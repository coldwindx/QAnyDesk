// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class CsHostInfo;
struct CsHostInfoDefaultTypeInternal;
extern CsHostInfoDefaultTypeInternal _CsHostInfo_default_instance_;
class CsRequestAuth;
struct CsRequestAuthDefaultTypeInternal;
extern CsRequestAuthDefaultTypeInternal _CsRequestAuth_default_instance_;
class Protocol;
struct ProtocolDefaultTypeInternal;
extern ProtocolDefaultTypeInternal _Protocol_default_instance_;
class ScReplyInfo;
struct ScReplyInfoDefaultTypeInternal;
extern ScReplyInfoDefaultTypeInternal _ScReplyInfo_default_instance_;
class ScResponseAuth;
struct ScResponseAuthDefaultTypeInternal;
extern ScResponseAuthDefaultTypeInternal _ScResponseAuth_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CsHostInfo* Arena::CreateMaybeMessage<::Protocol::CsHostInfo>(Arena*);
template<> ::Protocol::CsRequestAuth* Arena::CreateMaybeMessage<::Protocol::CsRequestAuth>(Arena*);
template<> ::Protocol::Protocol* Arena::CreateMaybeMessage<::Protocol::Protocol>(Arena*);
template<> ::Protocol::ScReplyInfo* Arena::CreateMaybeMessage<::Protocol::ScReplyInfo>(Arena*);
template<> ::Protocol::ScResponseAuth* Arena::CreateMaybeMessage<::Protocol::ScResponseAuth>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Protocol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Protocol) */ {
 public:
  inline Protocol() : Protocol(nullptr) {}
  ~Protocol() override;
  explicit constexpr Protocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protocol(const Protocol& from);
  Protocol(Protocol&& from) noexcept
    : Protocol() {
    *this = ::std::move(from);
  }

  inline Protocol& operator=(const Protocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protocol& operator=(Protocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protocol& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kCsHostInfo = 2,
    kScReplyInfo = 3,
    kCsRequestAuth = 4,
    kScResponseAuth = 5,
    BODY_NOT_SET = 0,
  };

  static inline const Protocol* internal_default_instance() {
    return reinterpret_cast<const Protocol*>(
               &_Protocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Protocol& a, Protocol& b) {
    a.Swap(&b);
  }
  inline void Swap(Protocol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protocol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protocol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Protocol& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protocol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Protocol";
  }
  protected:
  explicit Protocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCsHostInfoFieldNumber = 2,
    kScReplyInfoFieldNumber = 3,
    kCsRequestAuthFieldNumber = 4,
    kScResponseAuthFieldNumber = 5,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .Protocol.CsHostInfo csHostInfo = 2;
  bool has_cshostinfo() const;
  private:
  bool _internal_has_cshostinfo() const;
  public:
  void clear_cshostinfo();
  const ::Protocol::CsHostInfo& cshostinfo() const;
  PROTOBUF_NODISCARD ::Protocol::CsHostInfo* release_cshostinfo();
  ::Protocol::CsHostInfo* mutable_cshostinfo();
  void set_allocated_cshostinfo(::Protocol::CsHostInfo* cshostinfo);
  private:
  const ::Protocol::CsHostInfo& _internal_cshostinfo() const;
  ::Protocol::CsHostInfo* _internal_mutable_cshostinfo();
  public:
  void unsafe_arena_set_allocated_cshostinfo(
      ::Protocol::CsHostInfo* cshostinfo);
  ::Protocol::CsHostInfo* unsafe_arena_release_cshostinfo();

  // .Protocol.ScReplyInfo scReplyInfo = 3;
  bool has_screplyinfo() const;
  private:
  bool _internal_has_screplyinfo() const;
  public:
  void clear_screplyinfo();
  const ::Protocol::ScReplyInfo& screplyinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ScReplyInfo* release_screplyinfo();
  ::Protocol::ScReplyInfo* mutable_screplyinfo();
  void set_allocated_screplyinfo(::Protocol::ScReplyInfo* screplyinfo);
  private:
  const ::Protocol::ScReplyInfo& _internal_screplyinfo() const;
  ::Protocol::ScReplyInfo* _internal_mutable_screplyinfo();
  public:
  void unsafe_arena_set_allocated_screplyinfo(
      ::Protocol::ScReplyInfo* screplyinfo);
  ::Protocol::ScReplyInfo* unsafe_arena_release_screplyinfo();

  // .Protocol.CsRequestAuth csRequestAuth = 4;
  bool has_csrequestauth() const;
  private:
  bool _internal_has_csrequestauth() const;
  public:
  void clear_csrequestauth();
  const ::Protocol::CsRequestAuth& csrequestauth() const;
  PROTOBUF_NODISCARD ::Protocol::CsRequestAuth* release_csrequestauth();
  ::Protocol::CsRequestAuth* mutable_csrequestauth();
  void set_allocated_csrequestauth(::Protocol::CsRequestAuth* csrequestauth);
  private:
  const ::Protocol::CsRequestAuth& _internal_csrequestauth() const;
  ::Protocol::CsRequestAuth* _internal_mutable_csrequestauth();
  public:
  void unsafe_arena_set_allocated_csrequestauth(
      ::Protocol::CsRequestAuth* csrequestauth);
  ::Protocol::CsRequestAuth* unsafe_arena_release_csrequestauth();

  // .Protocol.ScResponseAuth scResponseAuth = 5;
  bool has_scresponseauth() const;
  private:
  bool _internal_has_scresponseauth() const;
  public:
  void clear_scresponseauth();
  const ::Protocol::ScResponseAuth& scresponseauth() const;
  PROTOBUF_NODISCARD ::Protocol::ScResponseAuth* release_scresponseauth();
  ::Protocol::ScResponseAuth* mutable_scresponseauth();
  void set_allocated_scresponseauth(::Protocol::ScResponseAuth* scresponseauth);
  private:
  const ::Protocol::ScResponseAuth& _internal_scresponseauth() const;
  ::Protocol::ScResponseAuth* _internal_mutable_scresponseauth();
  public:
  void unsafe_arena_set_allocated_scresponseauth(
      ::Protocol::ScResponseAuth* scresponseauth);
  ::Protocol::ScResponseAuth* unsafe_arena_release_scresponseauth();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:Protocol.Protocol)
 private:
  class _Internal;
  void set_has_cshostinfo();
  void set_has_screplyinfo();
  void set_has_csrequestauth();
  void set_has_scresponseauth();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Protocol::CsHostInfo* cshostinfo_;
    ::Protocol::ScReplyInfo* screplyinfo_;
    ::Protocol::CsRequestAuth* csrequestauth_;
    ::Protocol::ScResponseAuth* scresponseauth_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CsHostInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CsHostInfo) */ {
 public:
  inline CsHostInfo() : CsHostInfo(nullptr) {}
  ~CsHostInfo() override;
  explicit constexpr CsHostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsHostInfo(const CsHostInfo& from);
  CsHostInfo(CsHostInfo&& from) noexcept
    : CsHostInfo() {
    *this = ::std::move(from);
  }

  inline CsHostInfo& operator=(const CsHostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsHostInfo& operator=(CsHostInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsHostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsHostInfo* internal_default_instance() {
    return reinterpret_cast<const CsHostInfo*>(
               &_CsHostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CsHostInfo& a, CsHostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CsHostInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsHostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsHostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsHostInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsHostInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CsHostInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsHostInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CsHostInfo";
  }
  protected:
  explicit CsHostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuIdFieldNumber = 1,
    kDiskDeviceIdFieldNumber = 2,
    kMacAddressFieldNumber = 3,
  };
  // string cpuId = 1;
  void clear_cpuid();
  const std::string& cpuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpuid();
  PROTOBUF_NODISCARD std::string* release_cpuid();
  void set_allocated_cpuid(std::string* cpuid);
  private:
  const std::string& _internal_cpuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpuid(const std::string& value);
  std::string* _internal_mutable_cpuid();
  public:

  // string diskDeviceId = 2;
  void clear_diskdeviceid();
  const std::string& diskdeviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_diskdeviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_diskdeviceid();
  PROTOBUF_NODISCARD std::string* release_diskdeviceid();
  void set_allocated_diskdeviceid(std::string* diskdeviceid);
  private:
  const std::string& _internal_diskdeviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_diskdeviceid(const std::string& value);
  std::string* _internal_mutable_diskdeviceid();
  public:

  // string macAddress = 3;
  void clear_macaddress();
  const std::string& macaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_macaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_macaddress();
  PROTOBUF_NODISCARD std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CsHostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diskdeviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ScReplyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ScReplyInfo) */ {
 public:
  inline ScReplyInfo() : ScReplyInfo(nullptr) {}
  ~ScReplyInfo() override;
  explicit constexpr ScReplyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScReplyInfo(const ScReplyInfo& from);
  ScReplyInfo(ScReplyInfo&& from) noexcept
    : ScReplyInfo() {
    *this = ::std::move(from);
  }

  inline ScReplyInfo& operator=(const ScReplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScReplyInfo& operator=(ScReplyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScReplyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScReplyInfo* internal_default_instance() {
    return reinterpret_cast<const ScReplyInfo*>(
               &_ScReplyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScReplyInfo& a, ScReplyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ScReplyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScReplyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScReplyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScReplyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScReplyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScReplyInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScReplyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ScReplyInfo";
  }
  protected:
  explicit ScReplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegisterIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string registerId = 2;
  void clear_registerid();
  const std::string& registerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_registerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_registerid();
  PROTOBUF_NODISCARD std::string* release_registerid();
  void set_allocated_registerid(std::string* registerid);
  private:
  const std::string& _internal_registerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_registerid(const std::string& value);
  std::string* _internal_mutable_registerid();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ScReplyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registerid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CsRequestAuth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CsRequestAuth) */ {
 public:
  inline CsRequestAuth() : CsRequestAuth(nullptr) {}
  ~CsRequestAuth() override;
  explicit constexpr CsRequestAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CsRequestAuth(const CsRequestAuth& from);
  CsRequestAuth(CsRequestAuth&& from) noexcept
    : CsRequestAuth() {
    *this = ::std::move(from);
  }

  inline CsRequestAuth& operator=(const CsRequestAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRequestAuth& operator=(CsRequestAuth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CsRequestAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const CsRequestAuth* internal_default_instance() {
    return reinterpret_cast<const CsRequestAuth*>(
               &_CsRequestAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CsRequestAuth& a, CsRequestAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRequestAuth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CsRequestAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CsRequestAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CsRequestAuth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CsRequestAuth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CsRequestAuth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRequestAuth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CsRequestAuth";
  }
  protected:
  explicit CsRequestAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kPasswordFieldNumber = 3,
  };
  // string sourceId = 1;
  void clear_sourceid();
  const std::string& sourceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourceid();
  PROTOBUF_NODISCARD std::string* release_sourceid();
  void set_allocated_sourceid(std::string* sourceid);
  private:
  const std::string& _internal_sourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceid(const std::string& value);
  std::string* _internal_mutable_sourceid();
  public:

  // string targetId = 2;
  void clear_targetid();
  const std::string& targetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetid();
  PROTOBUF_NODISCARD std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CsRequestAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class ScResponseAuth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ScResponseAuth) */ {
 public:
  inline ScResponseAuth() : ScResponseAuth(nullptr) {}
  ~ScResponseAuth() override;
  explicit constexpr ScResponseAuth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScResponseAuth(const ScResponseAuth& from);
  ScResponseAuth(ScResponseAuth&& from) noexcept
    : ScResponseAuth() {
    *this = ::std::move(from);
  }

  inline ScResponseAuth& operator=(const ScResponseAuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScResponseAuth& operator=(ScResponseAuth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScResponseAuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScResponseAuth* internal_default_instance() {
    return reinterpret_cast<const ScResponseAuth*>(
               &_ScResponseAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScResponseAuth& a, ScResponseAuth& b) {
    a.Swap(&b);
  }
  inline void Swap(ScResponseAuth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScResponseAuth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScResponseAuth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScResponseAuth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScResponseAuth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScResponseAuth& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScResponseAuth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ScResponseAuth";
  }
  protected:
  explicit ScResponseAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kMsgFieldNumber = 4,
    kSuccessFieldNumber = 3,
  };
  // string sourceId = 1;
  void clear_sourceid();
  const std::string& sourceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourceid();
  PROTOBUF_NODISCARD std::string* release_sourceid();
  void set_allocated_sourceid(std::string* sourceid);
  private:
  const std::string& _internal_sourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceid(const std::string& value);
  std::string* _internal_mutable_sourceid();
  public:

  // string targetId = 2;
  void clear_targetid();
  const std::string& targetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetid();
  PROTOBUF_NODISCARD std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ScResponseAuth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Protocol

// string type = 1;
inline void Protocol::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Protocol::type() const {
  // @@protoc_insertion_point(field_get:Protocol.Protocol.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Protocol::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Protocol.type)
}
inline std::string* Protocol::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:Protocol.Protocol.type)
  return _s;
}
inline const std::string& Protocol::_internal_type() const {
  return type_.Get();
}
inline void Protocol::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Protocol::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Protocol::release_type() {
  // @@protoc_insertion_point(field_release:Protocol.Protocol.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Protocol::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Protocol.type)
}

// .Protocol.CsHostInfo csHostInfo = 2;
inline bool Protocol::_internal_has_cshostinfo() const {
  return body_case() == kCsHostInfo;
}
inline bool Protocol::has_cshostinfo() const {
  return _internal_has_cshostinfo();
}
inline void Protocol::set_has_cshostinfo() {
  _oneof_case_[0] = kCsHostInfo;
}
inline void Protocol::clear_cshostinfo() {
  if (_internal_has_cshostinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.cshostinfo_;
    }
    clear_has_body();
  }
}
inline ::Protocol::CsHostInfo* Protocol::release_cshostinfo() {
  // @@protoc_insertion_point(field_release:Protocol.Protocol.csHostInfo)
  if (_internal_has_cshostinfo()) {
    clear_has_body();
      ::Protocol::CsHostInfo* temp = body_.cshostinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.cshostinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::CsHostInfo& Protocol::_internal_cshostinfo() const {
  return _internal_has_cshostinfo()
      ? *body_.cshostinfo_
      : reinterpret_cast< ::Protocol::CsHostInfo&>(::Protocol::_CsHostInfo_default_instance_);
}
inline const ::Protocol::CsHostInfo& Protocol::cshostinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.Protocol.csHostInfo)
  return _internal_cshostinfo();
}
inline ::Protocol::CsHostInfo* Protocol::unsafe_arena_release_cshostinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Protocol.Protocol.csHostInfo)
  if (_internal_has_cshostinfo()) {
    clear_has_body();
    ::Protocol::CsHostInfo* temp = body_.cshostinfo_;
    body_.cshostinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Protocol::unsafe_arena_set_allocated_cshostinfo(::Protocol::CsHostInfo* cshostinfo) {
  clear_body();
  if (cshostinfo) {
    set_has_cshostinfo();
    body_.cshostinfo_ = cshostinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Protocol.csHostInfo)
}
inline ::Protocol::CsHostInfo* Protocol::_internal_mutable_cshostinfo() {
  if (!_internal_has_cshostinfo()) {
    clear_body();
    set_has_cshostinfo();
    body_.cshostinfo_ = CreateMaybeMessage< ::Protocol::CsHostInfo >(GetArenaForAllocation());
  }
  return body_.cshostinfo_;
}
inline ::Protocol::CsHostInfo* Protocol::mutable_cshostinfo() {
  ::Protocol::CsHostInfo* _msg = _internal_mutable_cshostinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.Protocol.csHostInfo)
  return _msg;
}

// .Protocol.ScReplyInfo scReplyInfo = 3;
inline bool Protocol::_internal_has_screplyinfo() const {
  return body_case() == kScReplyInfo;
}
inline bool Protocol::has_screplyinfo() const {
  return _internal_has_screplyinfo();
}
inline void Protocol::set_has_screplyinfo() {
  _oneof_case_[0] = kScReplyInfo;
}
inline void Protocol::clear_screplyinfo() {
  if (_internal_has_screplyinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.screplyinfo_;
    }
    clear_has_body();
  }
}
inline ::Protocol::ScReplyInfo* Protocol::release_screplyinfo() {
  // @@protoc_insertion_point(field_release:Protocol.Protocol.scReplyInfo)
  if (_internal_has_screplyinfo()) {
    clear_has_body();
      ::Protocol::ScReplyInfo* temp = body_.screplyinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.screplyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::ScReplyInfo& Protocol::_internal_screplyinfo() const {
  return _internal_has_screplyinfo()
      ? *body_.screplyinfo_
      : reinterpret_cast< ::Protocol::ScReplyInfo&>(::Protocol::_ScReplyInfo_default_instance_);
}
inline const ::Protocol::ScReplyInfo& Protocol::screplyinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.Protocol.scReplyInfo)
  return _internal_screplyinfo();
}
inline ::Protocol::ScReplyInfo* Protocol::unsafe_arena_release_screplyinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Protocol.Protocol.scReplyInfo)
  if (_internal_has_screplyinfo()) {
    clear_has_body();
    ::Protocol::ScReplyInfo* temp = body_.screplyinfo_;
    body_.screplyinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Protocol::unsafe_arena_set_allocated_screplyinfo(::Protocol::ScReplyInfo* screplyinfo) {
  clear_body();
  if (screplyinfo) {
    set_has_screplyinfo();
    body_.screplyinfo_ = screplyinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Protocol.scReplyInfo)
}
inline ::Protocol::ScReplyInfo* Protocol::_internal_mutable_screplyinfo() {
  if (!_internal_has_screplyinfo()) {
    clear_body();
    set_has_screplyinfo();
    body_.screplyinfo_ = CreateMaybeMessage< ::Protocol::ScReplyInfo >(GetArenaForAllocation());
  }
  return body_.screplyinfo_;
}
inline ::Protocol::ScReplyInfo* Protocol::mutable_screplyinfo() {
  ::Protocol::ScReplyInfo* _msg = _internal_mutable_screplyinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.Protocol.scReplyInfo)
  return _msg;
}

// .Protocol.CsRequestAuth csRequestAuth = 4;
inline bool Protocol::_internal_has_csrequestauth() const {
  return body_case() == kCsRequestAuth;
}
inline bool Protocol::has_csrequestauth() const {
  return _internal_has_csrequestauth();
}
inline void Protocol::set_has_csrequestauth() {
  _oneof_case_[0] = kCsRequestAuth;
}
inline void Protocol::clear_csrequestauth() {
  if (_internal_has_csrequestauth()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.csrequestauth_;
    }
    clear_has_body();
  }
}
inline ::Protocol::CsRequestAuth* Protocol::release_csrequestauth() {
  // @@protoc_insertion_point(field_release:Protocol.Protocol.csRequestAuth)
  if (_internal_has_csrequestauth()) {
    clear_has_body();
      ::Protocol::CsRequestAuth* temp = body_.csrequestauth_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.csrequestauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::CsRequestAuth& Protocol::_internal_csrequestauth() const {
  return _internal_has_csrequestauth()
      ? *body_.csrequestauth_
      : reinterpret_cast< ::Protocol::CsRequestAuth&>(::Protocol::_CsRequestAuth_default_instance_);
}
inline const ::Protocol::CsRequestAuth& Protocol::csrequestauth() const {
  // @@protoc_insertion_point(field_get:Protocol.Protocol.csRequestAuth)
  return _internal_csrequestauth();
}
inline ::Protocol::CsRequestAuth* Protocol::unsafe_arena_release_csrequestauth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Protocol.Protocol.csRequestAuth)
  if (_internal_has_csrequestauth()) {
    clear_has_body();
    ::Protocol::CsRequestAuth* temp = body_.csrequestauth_;
    body_.csrequestauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Protocol::unsafe_arena_set_allocated_csrequestauth(::Protocol::CsRequestAuth* csrequestauth) {
  clear_body();
  if (csrequestauth) {
    set_has_csrequestauth();
    body_.csrequestauth_ = csrequestauth;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Protocol.csRequestAuth)
}
inline ::Protocol::CsRequestAuth* Protocol::_internal_mutable_csrequestauth() {
  if (!_internal_has_csrequestauth()) {
    clear_body();
    set_has_csrequestauth();
    body_.csrequestauth_ = CreateMaybeMessage< ::Protocol::CsRequestAuth >(GetArenaForAllocation());
  }
  return body_.csrequestauth_;
}
inline ::Protocol::CsRequestAuth* Protocol::mutable_csrequestauth() {
  ::Protocol::CsRequestAuth* _msg = _internal_mutable_csrequestauth();
  // @@protoc_insertion_point(field_mutable:Protocol.Protocol.csRequestAuth)
  return _msg;
}

// .Protocol.ScResponseAuth scResponseAuth = 5;
inline bool Protocol::_internal_has_scresponseauth() const {
  return body_case() == kScResponseAuth;
}
inline bool Protocol::has_scresponseauth() const {
  return _internal_has_scresponseauth();
}
inline void Protocol::set_has_scresponseauth() {
  _oneof_case_[0] = kScResponseAuth;
}
inline void Protocol::clear_scresponseauth() {
  if (_internal_has_scresponseauth()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.scresponseauth_;
    }
    clear_has_body();
  }
}
inline ::Protocol::ScResponseAuth* Protocol::release_scresponseauth() {
  // @@protoc_insertion_point(field_release:Protocol.Protocol.scResponseAuth)
  if (_internal_has_scresponseauth()) {
    clear_has_body();
      ::Protocol::ScResponseAuth* temp = body_.scresponseauth_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.scresponseauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Protocol::ScResponseAuth& Protocol::_internal_scresponseauth() const {
  return _internal_has_scresponseauth()
      ? *body_.scresponseauth_
      : reinterpret_cast< ::Protocol::ScResponseAuth&>(::Protocol::_ScResponseAuth_default_instance_);
}
inline const ::Protocol::ScResponseAuth& Protocol::scresponseauth() const {
  // @@protoc_insertion_point(field_get:Protocol.Protocol.scResponseAuth)
  return _internal_scresponseauth();
}
inline ::Protocol::ScResponseAuth* Protocol::unsafe_arena_release_scresponseauth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Protocol.Protocol.scResponseAuth)
  if (_internal_has_scresponseauth()) {
    clear_has_body();
    ::Protocol::ScResponseAuth* temp = body_.scresponseauth_;
    body_.scresponseauth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Protocol::unsafe_arena_set_allocated_scresponseauth(::Protocol::ScResponseAuth* scresponseauth) {
  clear_body();
  if (scresponseauth) {
    set_has_scresponseauth();
    body_.scresponseauth_ = scresponseauth;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Protocol.scResponseAuth)
}
inline ::Protocol::ScResponseAuth* Protocol::_internal_mutable_scresponseauth() {
  if (!_internal_has_scresponseauth()) {
    clear_body();
    set_has_scresponseauth();
    body_.scresponseauth_ = CreateMaybeMessage< ::Protocol::ScResponseAuth >(GetArenaForAllocation());
  }
  return body_.scresponseauth_;
}
inline ::Protocol::ScResponseAuth* Protocol::mutable_scresponseauth() {
  ::Protocol::ScResponseAuth* _msg = _internal_mutable_scresponseauth();
  // @@protoc_insertion_point(field_mutable:Protocol.Protocol.scResponseAuth)
  return _msg;
}

inline bool Protocol::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void Protocol::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline Protocol::BodyCase Protocol::body_case() const {
  return Protocol::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CsHostInfo

// string cpuId = 1;
inline void CsHostInfo::clear_cpuid() {
  cpuid_.ClearToEmpty();
}
inline const std::string& CsHostInfo::cpuid() const {
  // @@protoc_insertion_point(field_get:Protocol.CsHostInfo.cpuId)
  return _internal_cpuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsHostInfo::set_cpuid(ArgT0&& arg0, ArgT... args) {
 
 cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CsHostInfo.cpuId)
}
inline std::string* CsHostInfo::mutable_cpuid() {
  std::string* _s = _internal_mutable_cpuid();
  // @@protoc_insertion_point(field_mutable:Protocol.CsHostInfo.cpuId)
  return _s;
}
inline const std::string& CsHostInfo::_internal_cpuid() const {
  return cpuid_.Get();
}
inline void CsHostInfo::_internal_set_cpuid(const std::string& value) {
  
  cpuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CsHostInfo::_internal_mutable_cpuid() {
  
  return cpuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CsHostInfo::release_cpuid() {
  // @@protoc_insertion_point(field_release:Protocol.CsHostInfo.cpuId)
  return cpuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CsHostInfo::set_allocated_cpuid(std::string* cpuid) {
  if (cpuid != nullptr) {
    
  } else {
    
  }
  cpuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpuid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cpuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CsHostInfo.cpuId)
}

// string diskDeviceId = 2;
inline void CsHostInfo::clear_diskdeviceid() {
  diskdeviceid_.ClearToEmpty();
}
inline const std::string& CsHostInfo::diskdeviceid() const {
  // @@protoc_insertion_point(field_get:Protocol.CsHostInfo.diskDeviceId)
  return _internal_diskdeviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsHostInfo::set_diskdeviceid(ArgT0&& arg0, ArgT... args) {
 
 diskdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CsHostInfo.diskDeviceId)
}
inline std::string* CsHostInfo::mutable_diskdeviceid() {
  std::string* _s = _internal_mutable_diskdeviceid();
  // @@protoc_insertion_point(field_mutable:Protocol.CsHostInfo.diskDeviceId)
  return _s;
}
inline const std::string& CsHostInfo::_internal_diskdeviceid() const {
  return diskdeviceid_.Get();
}
inline void CsHostInfo::_internal_set_diskdeviceid(const std::string& value) {
  
  diskdeviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CsHostInfo::_internal_mutable_diskdeviceid() {
  
  return diskdeviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CsHostInfo::release_diskdeviceid() {
  // @@protoc_insertion_point(field_release:Protocol.CsHostInfo.diskDeviceId)
  return diskdeviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CsHostInfo::set_allocated_diskdeviceid(std::string* diskdeviceid) {
  if (diskdeviceid != nullptr) {
    
  } else {
    
  }
  diskdeviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diskdeviceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (diskdeviceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    diskdeviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CsHostInfo.diskDeviceId)
}

// string macAddress = 3;
inline void CsHostInfo::clear_macaddress() {
  macaddress_.ClearToEmpty();
}
inline const std::string& CsHostInfo::macaddress() const {
  // @@protoc_insertion_point(field_get:Protocol.CsHostInfo.macAddress)
  return _internal_macaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsHostInfo::set_macaddress(ArgT0&& arg0, ArgT... args) {
 
 macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CsHostInfo.macAddress)
}
inline std::string* CsHostInfo::mutable_macaddress() {
  std::string* _s = _internal_mutable_macaddress();
  // @@protoc_insertion_point(field_mutable:Protocol.CsHostInfo.macAddress)
  return _s;
}
inline const std::string& CsHostInfo::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void CsHostInfo::_internal_set_macaddress(const std::string& value) {
  
  macaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CsHostInfo::_internal_mutable_macaddress() {
  
  return macaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CsHostInfo::release_macaddress() {
  // @@protoc_insertion_point(field_release:Protocol.CsHostInfo.macAddress)
  return macaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CsHostInfo::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    
  } else {
    
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (macaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CsHostInfo.macAddress)
}

// -------------------------------------------------------------------

// ScReplyInfo

// bool success = 1;
inline void ScReplyInfo::clear_success() {
  success_ = false;
}
inline bool ScReplyInfo::_internal_success() const {
  return success_;
}
inline bool ScReplyInfo::success() const {
  // @@protoc_insertion_point(field_get:Protocol.ScReplyInfo.success)
  return _internal_success();
}
inline void ScReplyInfo::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ScReplyInfo::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.ScReplyInfo.success)
}

// string registerId = 2;
inline void ScReplyInfo::clear_registerid() {
  registerid_.ClearToEmpty();
}
inline const std::string& ScReplyInfo::registerid() const {
  // @@protoc_insertion_point(field_get:Protocol.ScReplyInfo.registerId)
  return _internal_registerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScReplyInfo::set_registerid(ArgT0&& arg0, ArgT... args) {
 
 registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ScReplyInfo.registerId)
}
inline std::string* ScReplyInfo::mutable_registerid() {
  std::string* _s = _internal_mutable_registerid();
  // @@protoc_insertion_point(field_mutable:Protocol.ScReplyInfo.registerId)
  return _s;
}
inline const std::string& ScReplyInfo::_internal_registerid() const {
  return registerid_.Get();
}
inline void ScReplyInfo::_internal_set_registerid(const std::string& value) {
  
  registerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScReplyInfo::_internal_mutable_registerid() {
  
  return registerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScReplyInfo::release_registerid() {
  // @@protoc_insertion_point(field_release:Protocol.ScReplyInfo.registerId)
  return registerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScReplyInfo::set_allocated_registerid(std::string* registerid) {
  if (registerid != nullptr) {
    
  } else {
    
  }
  registerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registerid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (registerid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    registerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ScReplyInfo.registerId)
}

// -------------------------------------------------------------------

// CsRequestAuth

// string sourceId = 1;
inline void CsRequestAuth::clear_sourceid() {
  sourceid_.ClearToEmpty();
}
inline const std::string& CsRequestAuth::sourceid() const {
  // @@protoc_insertion_point(field_get:Protocol.CsRequestAuth.sourceId)
  return _internal_sourceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsRequestAuth::set_sourceid(ArgT0&& arg0, ArgT... args) {
 
 sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CsRequestAuth.sourceId)
}
inline std::string* CsRequestAuth::mutable_sourceid() {
  std::string* _s = _internal_mutable_sourceid();
  // @@protoc_insertion_point(field_mutable:Protocol.CsRequestAuth.sourceId)
  return _s;
}
inline const std::string& CsRequestAuth::_internal_sourceid() const {
  return sourceid_.Get();
}
inline void CsRequestAuth::_internal_set_sourceid(const std::string& value) {
  
  sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CsRequestAuth::_internal_mutable_sourceid() {
  
  return sourceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CsRequestAuth::release_sourceid() {
  // @@protoc_insertion_point(field_release:Protocol.CsRequestAuth.sourceId)
  return sourceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CsRequestAuth::set_allocated_sourceid(std::string* sourceid) {
  if (sourceid != nullptr) {
    
  } else {
    
  }
  sourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sourceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CsRequestAuth.sourceId)
}

// string targetId = 2;
inline void CsRequestAuth::clear_targetid() {
  targetid_.ClearToEmpty();
}
inline const std::string& CsRequestAuth::targetid() const {
  // @@protoc_insertion_point(field_get:Protocol.CsRequestAuth.targetId)
  return _internal_targetid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsRequestAuth::set_targetid(ArgT0&& arg0, ArgT... args) {
 
 targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CsRequestAuth.targetId)
}
inline std::string* CsRequestAuth::mutable_targetid() {
  std::string* _s = _internal_mutable_targetid();
  // @@protoc_insertion_point(field_mutable:Protocol.CsRequestAuth.targetId)
  return _s;
}
inline const std::string& CsRequestAuth::_internal_targetid() const {
  return targetid_.Get();
}
inline void CsRequestAuth::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CsRequestAuth::_internal_mutable_targetid() {
  
  return targetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CsRequestAuth::release_targetid() {
  // @@protoc_insertion_point(field_release:Protocol.CsRequestAuth.targetId)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CsRequestAuth::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CsRequestAuth.targetId)
}

// string password = 3;
inline void CsRequestAuth::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& CsRequestAuth::password() const {
  // @@protoc_insertion_point(field_get:Protocol.CsRequestAuth.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CsRequestAuth::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.CsRequestAuth.password)
}
inline std::string* CsRequestAuth::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.CsRequestAuth.password)
  return _s;
}
inline const std::string& CsRequestAuth::_internal_password() const {
  return password_.Get();
}
inline void CsRequestAuth::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CsRequestAuth::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CsRequestAuth::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.CsRequestAuth.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CsRequestAuth::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CsRequestAuth.password)
}

// -------------------------------------------------------------------

// ScResponseAuth

// string sourceId = 1;
inline void ScResponseAuth::clear_sourceid() {
  sourceid_.ClearToEmpty();
}
inline const std::string& ScResponseAuth::sourceid() const {
  // @@protoc_insertion_point(field_get:Protocol.ScResponseAuth.sourceId)
  return _internal_sourceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScResponseAuth::set_sourceid(ArgT0&& arg0, ArgT... args) {
 
 sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ScResponseAuth.sourceId)
}
inline std::string* ScResponseAuth::mutable_sourceid() {
  std::string* _s = _internal_mutable_sourceid();
  // @@protoc_insertion_point(field_mutable:Protocol.ScResponseAuth.sourceId)
  return _s;
}
inline const std::string& ScResponseAuth::_internal_sourceid() const {
  return sourceid_.Get();
}
inline void ScResponseAuth::_internal_set_sourceid(const std::string& value) {
  
  sourceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScResponseAuth::_internal_mutable_sourceid() {
  
  return sourceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScResponseAuth::release_sourceid() {
  // @@protoc_insertion_point(field_release:Protocol.ScResponseAuth.sourceId)
  return sourceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScResponseAuth::set_allocated_sourceid(std::string* sourceid) {
  if (sourceid != nullptr) {
    
  } else {
    
  }
  sourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sourceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ScResponseAuth.sourceId)
}

// string targetId = 2;
inline void ScResponseAuth::clear_targetid() {
  targetid_.ClearToEmpty();
}
inline const std::string& ScResponseAuth::targetid() const {
  // @@protoc_insertion_point(field_get:Protocol.ScResponseAuth.targetId)
  return _internal_targetid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScResponseAuth::set_targetid(ArgT0&& arg0, ArgT... args) {
 
 targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ScResponseAuth.targetId)
}
inline std::string* ScResponseAuth::mutable_targetid() {
  std::string* _s = _internal_mutable_targetid();
  // @@protoc_insertion_point(field_mutable:Protocol.ScResponseAuth.targetId)
  return _s;
}
inline const std::string& ScResponseAuth::_internal_targetid() const {
  return targetid_.Get();
}
inline void ScResponseAuth::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScResponseAuth::_internal_mutable_targetid() {
  
  return targetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScResponseAuth::release_targetid() {
  // @@protoc_insertion_point(field_release:Protocol.ScResponseAuth.targetId)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScResponseAuth::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (targetid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ScResponseAuth.targetId)
}

// bool success = 3;
inline void ScResponseAuth::clear_success() {
  success_ = false;
}
inline bool ScResponseAuth::_internal_success() const {
  return success_;
}
inline bool ScResponseAuth::success() const {
  // @@protoc_insertion_point(field_get:Protocol.ScResponseAuth.success)
  return _internal_success();
}
inline void ScResponseAuth::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ScResponseAuth::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.ScResponseAuth.success)
}

// string msg = 4;
inline void ScResponseAuth::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ScResponseAuth::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.ScResponseAuth.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScResponseAuth::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ScResponseAuth.msg)
}
inline std::string* ScResponseAuth::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.ScResponseAuth.msg)
  return _s;
}
inline const std::string& ScResponseAuth::_internal_msg() const {
  return msg_.Get();
}
inline void ScResponseAuth::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScResponseAuth::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScResponseAuth::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.ScResponseAuth.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScResponseAuth::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.ScResponseAuth.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
